import org.ajoberstar.grgit.Grgit

// Top-level build file where you can add configuration options common to all sub-projects/modules.
ext {
    toolsVersion = "23.0.1"
    kotlin_version = "0.13.1513"
    googlePlay = "8.1.0"
    appCompat = "23.0.1"

    bintrayRepo = 'maven'
    bintrayName = 'hermes'

    publishedGroupId = 'com.github.prefanatic.hermes'
    libraryName = 'Hermes'

    libraryDescription = 'Hermes'

    siteUrl = 'https://github.com/prefanatic/Hermes'
    gitUrl = 'https://github.com/prefanatic/Hermes.git'

    libraryVersion = '0.3.2'

    developerId = 'prefanatic'
    developerName = 'Cody Goldberg'
    developerEmail = 'joncgoldberg@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

group = 'com.github.prefanatic'
version = '1.0'

/*
uploadArchives {
    repositories {
        mavenDeployer {
            def repoUrl = getSdkDir() + "/extras/android/m2repository"

            repository(url: "file:///$repoUrl")
        }
    }
}
*/

buildscript {
    ext.kotlin_version = "0.13.1513"
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.+'

        // Java 8 Support
        classpath 'me.tatarka:gradle-retrolambda:3.2+'

        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'

        classpath 'org.ajoberstar:grgit:1.4.+'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://clojars.org/repo/' }
        maven { url "https://jitpack.io" }
    }
}

def getSdkDir() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    return properties.getProperty('sdk.dir')
}

def gitCommitCount() {
    def git = Grgit.open()

    return git.tag.list().size()
}

def gitRevision() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '-n', '1'
            standardOutput = stdout
        }
        def commitRevision = stdout.toString().trim()
        return commitRevision
    }
    catch (ignored) {
        return "(unknown revision)";
    }
}